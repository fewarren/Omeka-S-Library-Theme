<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation|null $site
 * @var \AdvancedSearch\Api\Representation\SearchConfigRepresentation $searchConfig
 * @var \AdvancedSearch\Query $query
 * @var \AdvancedSearch\Response $response
 * @var \Omeka\Api\Representation\ItemSetRepresentation|null $itemSet
 * @var string $resultPart "header" or "footer"
 */

$plugins = $this->getHelperPluginManager();
$translate = $plugins->get('translate');
$translatePlural = $plugins->get('translatePlural');

// Default values of the module.
$displayParts = [
    'search_filters' => 'header',
    'active_facets' => 'none',
    'total_results' => 'header',
    'search_form_simple' => 'none',
    'search_form_quick' => 'none',
    'paginator' => 'header',
    'per_page' => 'header',
    'sort' => 'header',
    'grid_list' => 'header',
    'grid_list_mode' => 'auto',
];
$displayParts = $searchConfig ? $searchConfig->setting('results', $displayParts) : $displayParts;
$displayParts = array_filter($displayParts, fn ($v) => in_array($v, [$resultPart, 'both']));

$paginationPerPages = isset($displayParts['per_page']) ? ($searchConfig->subSetting('results', 'per_page_list') ?: []) : [];
$sortFields = isset($displayParts['sort']) ? $searchConfig->subSetting('results', 'sort_list') : [];
$gridListMode = $searchConfig->subSetting('results', 'grid_list_mode', 'auto');
$multiMode = isset($displayParts['grid_list']) && !in_array($gridListMode, ['list_only', 'grid_only']);
?>

<?php // Search filters. ?>

<?php if (isset($displayParts['search_filters'])): ?>
<?= $searchConfig->renderSearchFilters($query, ['template' => 'common/search-filters-links']) ?>
<?php endif; ?>

<?php // Active Facets. ?>

<?php if (isset($displayParts['active_facets']) && $activeFacets = $response->getActiveFacets()): ?>
<?php $facetActives = $plugins->get('facetActives'); ?>
<?= $facetActives(null, $activeFacets, $searchConfig->setting('facet', [])) ?>
<?php endif; ?>

<?php // Total results. ?>

<?php if (isset($displayParts['total_results'])): ?>
<div class="search-results-count-total">
    <?php $totalResults = $response->getTotalResults(); ?>
    <?= sprintf($translatePlural('%s resource', '%s resources', $totalResults), $totalResults) ?>
</div>
<?php endif; ?>

<?php // Search form simple. ?>

<?php if (isset($displayParts['search_form_simple'])): ?>
<?= $searchConfig->renderForm(['variant' => 'simple', 'skip_form_action' => true]) ?>
<?php endif; ?>

<?php // Search form quick. ?>

<?php if (isset($displayParts['search_form_quick'])): ?>
<?= $searchConfig->renderForm(['variant' => 'quick', 'skip_form_action' => true]) ?>
<?php endif; ?>

<?php // Pagination. ?>

<?php if (isset($displayParts['paginator'])): ?>
<div class="search-results-count <?= isset($displayParts['total_results']) ? 'no-total-results' : '' ?>">
    <?php
    if ($itemSet && $site):
        $redirectItemSets = $this->siteSetting('advancedsearch_redirect_itemsets', ['default' => 'browse']);
        $redirectItemSet = $redirectItemSets[$itemSet->id()] ?? $redirectItemSets['default'] ?? 'browse';
        echo $redirectItemSet === 'all'
            ? $this->paginationSearch('common/pagination')
            : $this->pagination('common/pagination');
    else:
        echo $this->pagination('common/pagination');
    endif;
    ?>
</div>
<?php endif; ?>

<?php // Pagination per page. ?>

<?php if (count($paginationPerPages)): ?>
<?= $this->searchPaginationPerPageSelector($query, $paginationPerPages, true) ?>
<?php endif; ?>

<?php // Sort. ?>

<?php if (count($sortFields)): ?>
<?= $this->searchSortSelector($query, $sortFields, ['as_url' => true, 'label' => $searchConfig->subSetting('results', 'label_sort')]) ?>
<?php endif; ?>

<?php // Grid/list. ?>

<?php if ($multiMode): ?>
<div class="search-results-display" id="search-results-display">
    <a class="search-view-type search-view-type-list<?= $gridListMode === 'list' ? ' active' : '' ?>"
       href="<?= $this->url(null, [], ['query' => array_merge($this->params()->fromQuery(), ['view' => 'list'])], true) ?>"
       data-view-mode="list"
       role="button"
       aria-pressed="<?= $gridListMode === 'list' ? 'true' : 'false' ?>"
       title="<?= $translate('Switch to list view') ?>">
        <?= $translate('list') ?>
    </a>
    |
    <a class="search-view-type search-view-type-grid<?= $gridListMode === 'grid' ? ' active' : '' ?>"
       href="<?= $this->url(null, [], ['query' => array_merge($this->params()->fromQuery(), ['view' => 'grid'])], true) ?>"
       data-view-mode="grid"
       role="button"
       aria-pressed="<?= $gridListMode === 'grid' ? 'true' : 'false' ?>"
       title="<?= $translate('Switch to grid view') ?>">
        <?= $translate('grid') ?>
    </a>
</div>

<script>
(function() {
    'use strict';

    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        const displayContainer = document.getElementById('search-results-display');
        const resultsContainer = document.querySelector('.search-results');

        if (!displayContainer || !resultsContainer) return;

        const viewToggleLinks = displayContainer.querySelectorAll('.search-view-type');

        viewToggleLinks.forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();

                const viewMode = this.getAttribute('data-view-mode');
                const currentUrl = new URL(window.location);

                // Update URL parameter
                currentUrl.searchParams.set('view', viewMode);

                // Update browser history without page reload
                window.history.pushState({view: viewMode}, '', currentUrl.toString());

                // Update active states
                viewToggleLinks.forEach(function(otherLink) {
                    otherLink.classList.remove('active');
                    otherLink.setAttribute('aria-pressed', 'false');
                });

                this.classList.add('active');
                this.setAttribute('aria-pressed', 'true');

                // Update results container class
                resultsContainer.classList.remove('view-list', 'view-grid');
                resultsContainer.classList.add('view-' + viewMode);

                // Store preference in localStorage
                try {
                    localStorage.setItem('search-view-preference', viewMode);
                } catch (e) {
                    // Ignore localStorage errors
                }

                // Trigger custom event for other scripts
                const event = new CustomEvent('searchViewChanged', {
                    detail: { viewMode: viewMode }
                });
                document.dispatchEvent(event);
            });
        });

        // Apply stored preference on page load
        try {
            const storedPreference = localStorage.getItem('search-view-preference');
            if (storedPreference && (storedPreference === 'list' || storedPreference === 'grid')) {
                const preferredLink = displayContainer.querySelector('[data-view-mode="' + storedPreference + '"]');
                if (preferredLink && !preferredLink.classList.contains('active')) {
                    preferredLink.click();
                }
            }
        } catch (e) {
            // Ignore localStorage errors
        }

        // Handle browser back/forward buttons
        window.addEventListener('popstate', function(e) {
            if (e.state && e.state.view) {
                const viewMode = e.state.view;
                const targetLink = displayContainer.querySelector('[data-view-mode="' + viewMode + '"]');
                if (targetLink) {
                    // Update UI without triggering another history entry
                    viewToggleLinks.forEach(function(link) {
                        link.classList.remove('active');
                        link.setAttribute('aria-pressed', 'false');
                    });

                    targetLink.classList.add('active');
                    targetLink.setAttribute('aria-pressed', 'true');

                    resultsContainer.classList.remove('view-list', 'view-grid');
                    resultsContainer.classList.add('view-' + viewMode);
                }
            }
        });
    });
})();
</script>
<?php endif; ?>
